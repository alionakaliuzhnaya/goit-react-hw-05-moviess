{"version":3,"file":"static/js/428.7fd95fa4.chunk.js","mappings":"uSAGeA,EAASC,EAAAA,GAAAA,GAAD,wHAORC,EAASD,EAAAA,GAAAA,GAAD,oCAGVE,EAAQF,EAAAA,GAAAA,IAAD,oEAOPG,EAAcH,EAAAA,GAAAA,EAAD,4DAIbI,EAAYJ,EAAAA,GAAAA,GAAD,wC,oLCtBlBK,EAAU,gCACVC,EAAQ,mCAAd,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GACvDC,QAAQC,IAAIH,GADd,SAE2BI,MAAMJ,EAAKC,GAFtC,YAEUI,EAFV,QAGoBC,GAHpB,iCAIcD,EAASE,OAJvB,gDAKQC,QAAQC,OAAO,IAAIC,MAAM,cALjC,2GAQS,SAASC,IACd,OAAOZ,EAAuB,GAAD,OAAIF,EAAJ,uCAA2CC,IAInE,SAASc,EAAiBC,GAEhC,OADAX,QAAQC,IAAIU,GACLd,EAAuB,GAAD,OAAIF,EAAJ,gCAAoCC,EAApC,iCAAoEe,EAApE,gCAKxB,SAASC,EAAeC,GAE9B,OADAb,QAAQC,IAAIY,GACLhB,EAAuB,GAAD,OAAIF,EAAJ,iBAAqBkB,EAArB,oBAAwCjB,EAAxC,oBAGtB,SAASkB,EAAYD,GAC1B,OAAOhB,EAAuB,GAAD,OAAIF,EAAJ,iBAAqBkB,EAArB,4BAAgDjB,EAAhD,oBAGxB,SAASmB,EAAaF,GAC3B,OAAOhB,EAAuB,GAAD,OAAIF,EAAJ,iBAAqBkB,EAArB,4BAAgDjB,EAAhD,6B,gGCRjC,I,kBCFC,EApBmB,SAAC,GAAa,IAAZoB,EAAW,EAAXA,QACnB,OACG,+BACM,OAAPA,QAAO,IAAPA,OAAA,EAAAA,EAASC,QAAS,GACrB,SAAC,KAAD,UACDD,EAAQE,KAAI,YAAwB,IAAtBC,EAAqB,EAArBA,OAAUC,GAAW,EAAdC,GAAc,EAAXD,SACpB,OACF,2BACA,qCAAaD,MACb,uBAAIC,MD8BM,WAGX,IAH0B,IAAdE,EAAc,uDAAP,GACfD,EAAK,GACLE,EAAQC,OAAOC,gBAAgB,IAAIC,WAAWJ,IAC3CA,KAAQ,CACb,IAAIK,EAAqB,GAAdJ,EAAMD,GAEfD,GADEM,EAAO,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGV,OAAON,EC/CGS,UAQZ,yE,SCGC,EAlBc,WACV,IAAOjB,GAASkB,EAAAA,EAAAA,MAATlB,QACP,GAA2BmB,EAAAA,EAAAA,UAAS,IAApC,eAAOhB,EAAP,KAAeiB,EAAf,KAQJ,OANIC,EAAAA,EAAAA,YAAU,YACVnB,EAAAA,EAAAA,IAAaF,GACZsB,MAAK,gBAAEC,EAAF,EAAEA,QAAF,OAAaH,EAAWG,MAC7BC,OAAM,SAAAC,GAAK,OAAItC,QAAQC,IAAIqC,QAE7B,CAACzB,KAED,+BACA,SAAC,EAAD,CAAaG,QAASA","sources":["components/CastList/CastList.styled.js","services/moviesApi.js","../node_modules/nanoid/index.prod.js","components/ReviewsList/ReviewsList.js","views/Reviews.js"],"sourcesContent":["import styled from 'styled-components'\n\n\n  export const ListCast=styled.ul`  \n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  list-style:  none;\n`\n  \n  export const CastItem=styled.li`\nmargin:20px;`\n\nexport const CastImg=styled.img`\nborder-radius:5px;\nmax-width: 200px; \n}\n;`\n\n\nexport const CharacterData=styled.p`\nfont-weight: 300;\nmax-width: 200px;`\n\nexport const ListReviews=styled.ul`\nlist-style:none`\n","\n//import axios from 'axios';\nconst BASE_URL =\"https://api.themoviedb.org/3/\"\nconst API_KEY=\"0dc1b7672e27ccf3c49c2486e3f06114\";\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  console.log(url)\n    const response = await fetch(url, config);\n    return response.ok\n      ? await response.json()\n      : Promise.reject(new Error('Not found'));\n  }\n  \n  export function fetchTrending() {\n    return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n  }\n\n  \n  export function fetchSearchMovie(searchQuery) {\n   console.log(searchQuery)\n   return fetchWithErrorHandling(`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`);\n    \n  }\n\n\n export function fetchMovieById(movieId) {\n  console.log(movieId)\n  return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n }\n  \n  export function fetchActors(movieId) {\n    return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n  }\n\n  export function fetchReviews(movieId) {\n    return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  }\n\n  \n  ","import { urlAlphabet } from './url-alphabet/index.js'\nif (false) {\n  if (\n    typeof navigator !== 'undefined' &&\n    navigator.product === 'ReactNative' &&\n    typeof crypto === 'undefined'\n  ) {\n    throw new Error(\n      'React Native does not have a built-in secure random generator. ' +\n        'If you don’t need unpredictable IDs use `nanoid/non-secure`. ' +\n        'For secure IDs, import `react-native-get-random-values` ' +\n        'before Nano ID.'\n    )\n  }\n  if (typeof msCrypto !== 'undefined' && typeof crypto === 'undefined') {\n    throw new Error(\n      'Import file with `if (!window.crypto) window.crypto = window.msCrypto`' +\n        ' before importing Nano ID to fix IE 11 support'\n    )\n  }\n  if (typeof crypto === 'undefined') {\n    throw new Error(\n      'Your browser does not have secure random generator. ' +\n        'If you don’t need unpredictable IDs, you can use nanoid/non-secure.'\n    )\n  }\n}\nlet random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nlet customRandom = (alphabet, size, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * size) / alphabet.length)\n  return () => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nlet customAlphabet = (alphabet, size) => customRandom(alphabet, size, random)\nlet nanoid = (size = 21) => {\n  let id = ''\n  let bytes = crypto.getRandomValues(new Uint8Array(size))\n  while (size--) {\n    let byte = bytes[size] & 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte < 63) {\n      id += '_'\n    } else {\n      id += '-'\n    }\n  }\n  return id\n}\nexport { nanoid, customAlphabet, customRandom, urlAlphabet, random }\n"," \n import propTypes from \"prop-types\";\n import { nanoid } from \"nanoid\";\n import { ListReviews } from \"../CastList/CastList.styled\";\n \n const ReviewsList =({reviews})=>{\n   return (\n      <>\n    {reviews?.length > 0 ? (\n  <ListReviews>\n{reviews.map(({author,id,content})=>{\n     return(           \n   <li key={nanoid()}>\n   <p> Author: {author}</p>\n   <p>{content}</p>\n   </li>\n   );\n})}\n</ListReviews> \n): (\n<p>\"We don`t have any review for this movie\" </p>\n)} \n</>)\n }\n\n export default ReviewsList;\n\n\n ReviewsList.propTypes={\n    reviews:propTypes.arrayOf(\n        propTypes.shape({\n            \n            author:propTypes.string,\n            content:propTypes.string,\n        }).isRequired\n    )\n};","import { useParams } from \"react-router-dom\"\nimport { useEffect, useState } from \"react/cjs/react.development\";\nimport ReviewsList from \"../components/ReviewsList/ReviewsList.js\";\nimport { fetchReviews } from \"../services/moviesApi\";\n\n const Reviews=()=>{\n     const {movieId}=useParams();\n     const [reviews,SetReviews]=useState([]);\n\n     useEffect(()=>{\n     fetchReviews(movieId)\n     .then(({results})=>SetReviews(results))\n     .catch(error => console.log(error));\n     \n }, [movieId]);\n return(\n    <> \n    <ReviewsList reviews={reviews}/>\n    </>\n );\n\n }\n\n export default Reviews;"],"names":["ListCast","styled","CastItem","CastImg","CharacterData","ListReviews","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","console","log","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovie","searchQuery","fetchMovieById","movieId","fetchActors","fetchReviews","reviews","length","map","author","content","id","size","bytes","crypto","getRandomValues","Uint8Array","byte","toString","toUpperCase","nanoid","useParams","useState","SetReviews","useEffect","then","results","catch","error"],"sourceRoot":""}