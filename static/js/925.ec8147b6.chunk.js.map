{"version":3,"file":"static/js/925.ec8147b6.chunk.js","mappings":"uSAGeA,EAASC,EAAAA,GAAAA,GAAD,wHAORC,EAASD,EAAAA,GAAAA,GAAD,oCAGVE,EAAQF,EAAAA,GAAAA,IAAD,oEAOPG,EAAcH,EAAAA,GAAAA,EAAD,4DAIbI,EAAYJ,EAAAA,GAAAA,GAAD,wC,oLCtBlBK,EAAU,gCACVC,EAAQ,mCAAd,SAEeC,IAAAA,OAAAA,EAAAA,MAAAA,KAAAA,WAAAA,SAAAA,IAAf,OAAeA,GAAAA,EAAAA,EAAAA,GAAAA,IAAAA,MAAf,2GAAsCC,EAAtC,+BAA4C,GAAIC,EAAhD,+BAAyD,GACvDC,QAAQC,IAAIH,GADd,SAE2BI,MAAMJ,EAAKC,GAFtC,YAEUI,EAFV,QAGoBC,GAHpB,iCAIcD,EAASE,OAJvB,gDAKQC,QAAQC,OAAO,IAAIC,MAAM,cALjC,2GAQS,SAASC,IACd,OAAOZ,EAAuB,GAAD,OAAIF,EAAJ,uCAA2CC,IAInE,SAASc,EAAiBC,GAEhC,OADAX,QAAQC,IAAIU,GACLd,EAAuB,GAAD,OAAIF,EAAJ,gCAAoCC,EAApC,iCAAoEe,EAApE,gCAKxB,SAASC,EAAeC,GAE9B,OADAb,QAAQC,IAAIY,GACLhB,EAAuB,GAAD,OAAIF,EAAJ,iBAAqBkB,EAArB,oBAAwCjB,EAAxC,oBAGtB,SAASkB,EAAYD,GAC1B,OAAOhB,EAAuB,GAAD,OAAIF,EAAJ,iBAAqBkB,EAArB,4BAAgDjB,EAAhD,oBAGxB,SAASmB,EAAaF,GAC3B,OAAOhB,EAAuB,GAAD,OAAIF,EAAJ,iBAAqBkB,EAArB,4BAAgDjB,EAAhD,6B,2HCT/B,EAvBgB,SAAC,GAAU,IAAToB,EAAQ,EAARA,KACd,OAAQ,+BACH,OAAJA,QAAI,IAAJA,OAAA,EAAAA,EAAMC,QAAO,GACV,SAAC,KAAD,UACKD,EAAKE,KAAI,YAAqC,IAAnCC,EAAkC,EAAlCA,GAAGC,EAA+B,EAA/BA,aAAaC,EAAkB,EAAlBA,KAAKC,EAAa,EAAbA,UAC7B,OAEI,UAAC,KAAD,YACI,SAAC,KAAD,CAASC,IAAG,yCAAoCH,GAC/CI,IAAI,YACT,uBAAIH,KACJ,UAAC,KAAD,yBAA2BC,EAA3B,SAJeH,SAU3B,sECKV,EAnBa,WACR,IAAON,GAASY,EAAAA,EAAAA,MAATZ,QACP,GAAsBa,EAAAA,EAAAA,UAAS,IAA/B,eAAOV,EAAP,KAAaW,EAAb,KAUJ,OAPIC,EAAAA,EAAAA,YAAU,YACVd,EAAAA,EAAAA,IAAYD,GACXgB,MAAK,gBAAEb,EAAF,EAAEA,KAAF,OAAUW,EAAQX,MACvBc,OAAM,SAAAC,GAAK,OAAI/B,QAAQC,IAAI8B,QAE7B,CAAClB,KAGL,+BACA,SAAC,EAAD,CAAUG,KAAMA","sources":["components/CastList/CastList.styled.js","services/moviesApi.js","components/CastList/CastList.js","views/Cast.js"],"sourcesContent":["import styled from 'styled-components'\n\n\n  export const ListCast=styled.ul`  \n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n  list-style:  none;\n`\n  \n  export const CastItem=styled.li`\nmargin:20px;`\n\nexport const CastImg=styled.img`\nborder-radius:5px;\nmax-width: 200px; \n}\n;`\n\n\nexport const CharacterData=styled.p`\nfont-weight: 300;\nmax-width: 200px;`\n\nexport const ListReviews=styled.ul`\nlist-style:none`\n","\n//import axios from 'axios';\nconst BASE_URL =\"https://api.themoviedb.org/3/\"\nconst API_KEY=\"0dc1b7672e27ccf3c49c2486e3f06114\";\n\nasync function fetchWithErrorHandling(url = '', config = {}) {\n  console.log(url)\n    const response = await fetch(url, config);\n    return response.ok\n      ? await response.json()\n      : Promise.reject(new Error('Not found'));\n  }\n  \n  export function fetchTrending() {\n    return fetchWithErrorHandling(`${BASE_URL}/trending/movie/day?api_key=${API_KEY}`);\n  }\n\n  \n  export function fetchSearchMovie(searchQuery) {\n   console.log(searchQuery)\n   return fetchWithErrorHandling(`${BASE_URL}search/movie?api_key=${API_KEY}&language=en-US&query=${searchQuery}&page=1&include_adult=false`);\n    \n  }\n\n\n export function fetchMovieById(movieId) {\n  console.log(movieId)\n  return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}?api_key=${API_KEY}&language=en-US`);\n }\n  \n  export function fetchActors(movieId) {\n    return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}&language=en-US`);\n  }\n\n  export function fetchReviews(movieId) {\n    return fetchWithErrorHandling(`${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}&language=en-US&page=1`);\n  }\n\n  \n  ","import propTypes from \"prop-types\";\nimport { CastImg,ListCast, CastItem,CharacterData} from \"./CastList.styled\";\n\n  const CastList =({cast})=>{\n      return (<>\n      {cast?.length>0 ? (\n          <ListCast>\n              {cast.map(({id,profile_path,name,character})=>{\n                  return(\n                  \n                      <CastItem key={id}>\n                          <CastImg src={`https://image.tmdb.org/t/p/w500${profile_path}`}\n                           alt=\"{name}\" />\n                      <p>{name}</p>\n                      <CharacterData> Character:{character} </CharacterData>\n                      </CastItem>\n                      \n                  );\n              })}\n          </ListCast>\n      ): (<p>\"We don`t have any cast for this movie\"\n      </p>)}\n      </>\n      )\n  }\n\n  export default CastList;\n\nCastList.propTypes={\n    cast:propTypes.arrayOf(\n        propTypes.shape({\n            id:propTypes.number.isRequired,\n            profile_path:propTypes.string,\n            name:propTypes.string,\n            character:propTypes.string,\n        }).isRequired\n    )\n};","import { useParams } from \"react-router-dom\"\nimport { useState, useEffect } from 'react';\nimport { fetchActors } from \"../services/moviesApi\";\nimport CastList from \"../components/CastList/CastList\"\n \n\n const Cast =()=>{\n     const {movieId}=useParams();\n     const [cast, setCast]=useState([]);\n\n\n     useEffect(()=>{\n     fetchActors(movieId)\n     .then(({cast})=>setCast(cast))\n     .catch(error => console.log(error));\n     \n }, [movieId]);\n\n return(\n<>\n<CastList cast={cast}/>\n </>\n );\n\n}\nexport default Cast;"],"names":["ListCast","styled","CastItem","CastImg","CharacterData","ListReviews","BASE_URL","API_KEY","fetchWithErrorHandling","url","config","console","log","fetch","response","ok","json","Promise","reject","Error","fetchTrending","fetchSearchMovie","searchQuery","fetchMovieById","movieId","fetchActors","fetchReviews","cast","length","map","id","profile_path","name","character","src","alt","useParams","useState","setCast","useEffect","then","catch","error"],"sourceRoot":""}